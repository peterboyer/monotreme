#!/usr/bin/env node

import { execSync } from "node:child_process";

const [, , command, ...args] = process.argv;
const verbose = process.argv.some((arg) => arg === "--verbose");
const json = process.argv.some((arg) => arg === "--json");
/** @type {ReadonlyArray<string>} */
const ignore = process.argv.reduce((acc, arg) => {
	if (arg.startsWith("--ignore")) {
		acc.push(arg.substring(9));
	}
	return acc;
}, /** @type {Array<string>} */ ([]));
const ignoreRootPackageJson = !process.argv.some(
	(arg) => arg === "--no-ignore-root",
);
const ignoreMonotremePackageJson = !process.argv.some(
	(arg) => arg === "--no-ignore-monotreme",
);

debug({
	command,
	verbose,
	json,
	ignore,
	ignoreRootPackageJson,
	ignoreMonotremePackageJson,
});

if (!command) {
	throw new Error("Missing command.");
} else if (command === "affected") {
	affected();
} else {
	throw new Error("Unknown command.");
}

function affected() {
	const ref = args.filter((arg) => !arg.startsWith("--"))[0] ?? "HEAD^1";
	debug({ ref });

	/** @type {ReadonlyArray<string>} */
	const packagedirs = execSync(
		[
			"find .",
			"-name package.json",
			'-not -path "*/node_modules/*"',
			ignoreRootPackageJson ? '-not -path "./package.json"' : "",
			ignoreMonotremePackageJson ? '-not -path "./monotreme/*"' : "",
			...ignore.map((pattern) => `-not -path "${pattern}"`),
			"| xargs dirname",
		].join(" "),
	)
		.toString()
		.trim()
		.replaceAll("./", "")
		.split("\n");
	debug({ packagedirs });

	/** @type {ReadonlyArray<string>} */
	const affectedfiles = execSync(
		`git diff --name-only ${ref} -- ${packagedirs.join(" ")}`,
	)
		.toString()
		.trim()
		.split("\n");
	debug({ affectedfiles });

	/** @type {ReadonlyArray<string>} */
	const affectedpackagedirs = Array.from(
		packagedirs
			.reduce((acc, dir) => {
				if (affectedfiles.some((file) => file.startsWith(dir))) {
					acc.add(dir);
				}
				return acc;
			}, /** @type {Set<string>} */ (new Set()))
			.values(),
	);
	debug({ affectedpackagedirs });

	if (json) {
		console.info(JSON.stringify(affectedpackagedirs));
	} else {
		console.info(affectedpackagedirs.join("\n"));
	}
}

/**
 * @param {unknown} value
 * @return {string}
 */
function debug(value) {
	verbose && console.debug(JSON.stringify(value, undefined, 2));
}
